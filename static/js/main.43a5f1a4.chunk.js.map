{"version":3,"sources":["containers/employees.jsx","App.js","serviceWorker.js","index.js"],"names":["employees","state","search","filteredEmployees","sortEmployees","field","sortedEmployees","sort","a","b","setState","handleInputChange","event","target","name","value","handleSearch","preventDefault","filterEmployees","searchTerm","toLowerCase","filter","employee","last","includes","axios","get","then","response","data","results","className","onSubmit","this","type","placeholder","onChange","scope","onClick","map","index","key","login","uuid","first","src","picture","thumbnail","alt","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"8QA4HeA,E,4MAxHbC,MAAQ,CACNC,OAAQ,GACRF,UAAW,GACXG,kBAAmB,I,EAerBC,cAAgB,SAACC,GAMf,IAAMC,EAAkB,EAAKL,MAAMD,UAAUO,MAL7C,SAAiBC,EAAGC,GAClB,OAAID,EAAC,KAASH,GAASI,EAAC,KAASJ,GAAe,EAC5CG,EAAC,KAASH,GAASI,EAAC,KAASJ,IAAgB,EAC1C,KAGT,EAAKK,SAAS,CACZV,UAAWM,K,EAIfK,kBAAoB,SAACC,GAAW,IAAD,EACLA,EAAMC,OAAtBC,EADqB,EACrBA,KAAMC,EADe,EACfA,MACd,EAAKL,SAAL,eACGI,EAAOC,K,EAIZC,aAAe,SAACJ,GACdA,EAAMK,iBACN,EAAKC,mB,EAGPA,gBAAkB,WAChB,IAAMC,EAAa,EAAKlB,MAAMC,OAAOkB,cACrC,EAAKV,SAAS,CACZP,kBAAmB,EAAKF,MAAMD,UAAUqB,QAAO,SAACC,GAAD,OAC7CA,EAASR,KAAKS,KAAKH,cAAcI,SAASL,S,kEAxC3B,IAAD,OAClBM,IAAMC,IAAI,yCAAyCC,MAAK,SAACC,GAGvD,EAAKlB,SAAS,CACZV,UAAW4B,EAASC,KAAKC,QACzB3B,kBAAmByB,EAASC,KAAKC,e,+BAuC7B,IAAD,OACP,OACE,6BACE,yBAAKC,UAAU,aACb,kDACA,yBAAKA,UAAU,OACb,yBAAKA,UAAU,OACb,0BAAMC,SAAUC,KAAKjB,cACnB,yBAAKe,UAAU,cACb,2BACEG,KAAK,OACLH,UAAU,eACVI,YAAY,sCACZrB,KAAK,SACLC,MAAOkB,KAAKhC,MAAMC,OAClBkC,SAAUH,KAAKtB,qBAGnB,4BAAQuB,KAAK,SAASH,UAAU,mBAAhC,aAMN,2BAAOA,UAAU,kCACf,+BACE,4BACE,wBAAIM,MAAM,OAAV,MACA,wBACEA,MAAM,MACNC,QAAS,WACP,EAAKlC,cAAc,WAGrB,4BAAQ2B,UAAU,gBAAlB,eAEF,wBACEM,MAAM,MACNC,QAAS,WACP,EAAKlC,cAAc,UAGrB,4BAAQ2B,UAAU,gBAAlB,cAEF,wBAAIM,MAAM,OAAV,eAGJ,+BACGJ,KAAKhC,MAAME,kBAAkBoC,KAAI,SAACjB,EAAUkB,GAAX,OAChC,wBAAIC,IAAKnB,EAASoB,MAAMC,MACtB,wBAAIN,MAAM,OAAOG,EAAQ,GACzB,4BAAKlB,EAASR,KAAK8B,OACnB,4BAAKtB,EAASR,KAAKS,MACnB,4BACE,yBACEsB,IAAKvB,EAASwB,QAAQC,UACtBC,IAAI,oC,GA5GFC,aCcTC,MAXf,WACE,OACE,6BACE,kBAAC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpC,MAAK,SAAAqC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.43a5f1a4.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nclass employees extends Component {\n  state = {\n    search: \"\",\n    employees: [],\n    filteredEmployees: [],\n  };\n\n  componentDidMount() {\n    axios.get(\"https://randomuser.me/api/?results=50\").then((response) => {\n    //   console.log(\"the response\", response.data.results);\n\n      this.setState({\n        employees: response.data.results,\n        filteredEmployees: response.data.results,\n      });\n    //   console.log(this.state.filteredEmployees);\n    });\n  }\n\n  sortEmployees = (field) => {\n    function compare(a, b) {\n      if (a[\"name\"][field] > b[\"name\"][field]) return 1;\n      if (a[\"name\"][field] < b[\"name\"][field]) return -1;\n      return 0;\n    }\n    const sortedEmployees = this.state.employees.sort(compare);\n    this.setState({\n      employees: sortedEmployees,\n    });\n  };\n\n  handleInputChange = (event) => {\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleSearch = (event) => {\n    event.preventDefault();\n    this.filterEmployees();\n  };\n\n  filterEmployees = () => {\n    const searchTerm = this.state.search.toLowerCase();\n    this.setState({\n      filteredEmployees: this.state.employees.filter((employee) =>\n        employee.name.last.toLowerCase().includes(searchTerm)\n      ),\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <div className=\"container\">\n          <h1>Empoyee Directory </h1>\n          <div className=\"row\">\n            <div className=\"col\">\n              <form onSubmit={this.handleSearch}>\n                <div className=\"form-group\">\n                  <input\n                    type=\"text\"\n                    className=\"form-control\"\n                    placeholder=\"Search for an Employee by Last Name\"\n                    name=\"search\"\n                    value={this.state.search}\n                    onChange={this.handleInputChange}\n                  />\n                </div>\n                <button type=\"submit\" className=\"btn btn-primary\">\n                  Search\n                </button>\n              </form>\n            </div>\n          </div>\n          <table className=\"table table-striped table-dark\">\n            <thead>\n              <tr>\n                <th scope=\"col\">Id</th>\n                <th\n                  scope=\"col\"\n                  onClick={() => {\n                    this.sortEmployees(\"first\");\n                  }}\n                >\n                  <button className=\"btn btn-dark\">First Name</button>\n                </th>\n                <th\n                  scope=\"col\"\n                  onClick={() => {\n                    this.sortEmployees(\"last\");\n                  }}\n                >\n                  <button className=\"btn btn-dark\">Last Name</button>\n                </th>\n                <th scope=\"col\">Thumbnail</th>\n              </tr>\n            </thead>\n            <tbody>\n              {this.state.filteredEmployees.map((employee, index) => (\n                <tr key={employee.login.uuid}>\n                  <th scope=\"row\">{index + 1}</th>\n                  <td>{employee.name.first}</td>\n                  <td>{employee.name.last}</td>\n                  <td>\n                    <img\n                      src={employee.picture.thumbnail}\n                      alt=\"Employee Thumbnail\"\n                    />\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default employees;\n","import React from 'react';\n// import { BrowserRouter as Router, Route } from \"react-router-dom\";\n// import employees from './containers/employees';\nimport Employees from \"./containers/employees\"\n\n\nfunction App() {\n  return (\n    <div>\n      <Employees/>\n    </div>\n    // <Router>\n    //   <Route exact path=\"/\" component = {employees}/>\n    // </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}